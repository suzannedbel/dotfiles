---
- name: Clone dotfiles
  git:
    repo: "{{ dotfiles_repository }}"
    dest: "{{ dotfiles }}"
    accept_hostkey: true
    version: master
  ignore_errors: True

- name: Ensure dotfiles exist
  shell: "test -d {{ dotfiles }}"

- name: Create XDG_CONFIG_HOME
  file:
    dest: "{{ xdg_config_home }}"
    state: directory

- name: Create golang bin folder
  file:
    dest: "{{ home }}/go/bin"
    recurse: true
    state: directory

- name: Symlink bin folder
  file:
    src: "{{ dotfiles }}/bin"
    dest: "{{ home }}/bin"
    state: link

- name: Symlink folders to XDG_CONFIG_HOME
  file:
    src: "{{ dotfiles }}/{{ item }}"
    dest: "{{ xdg_config_home }}/{{ item }}"
    state: link
  with_items:
    - fish
    - i3
    - nvim

- name: Symlink miscellaneous files
  file:
    src: "{{ dotfiles }}/misc/{{ item }}"
    dest: "{{ home }}/.{{ item }}"
    state: link
  with_items:
    - tmux.conf

- name: Symlink config folders
  file:
    src: "{{ dotfiles}}/{{ item }}"
    dest: "{{ home }}/.{{ item }}"
    state: link
  with_items:
    - httpie
    - mitmproxy

- name: Find out path to fish
  command: which fish
  register: which_fish

- name: Find out if shell is already set to fish
  script: detect_fish
  register: shell_is_fish
  ignore_errors: True

- name: Change shell to fish
  user:
    name: "{{ user }}"
    shell: "{{ which_fish }}"
  become: true
  when: shell_is_fish|failed

- name: Python 2 packages
  pip:
    requirements: "{{ dotfiles }}/python/requirements2.txt"
    executable: pip2
  become: true

- name: Python 3 packages
  pip:
    requirements: "{{ dotfiles }}/python/requirements.txt"
    executable: pip3
  become: true

- name: Git configuration
  command: git config --global {{ item.key }} {{ item.value }}
  with_dict: "{{ git_config }}"

- name: Git email configured?
  command: grep {{ home }}/.gitconfig -e 'email'
  register: git_email_configured
  ignore_errors: true

- name: Configure git email
  command: git config --global user.email {{ git_email }}
  when: git_email_configured|failed

- name: Go Lint
  command: go get -u github.com/golang/lint/golint
  environment:
    GOPATH: "{{ home }}/go"

- name: NPM configuration
  npm:
    name: "{{ item }}"
    global: true
  with_items: "{{ npm_packages }}"
  ignore_errors: true

- name: Neovim configuration
  command: nvim +PlugInstall +qall
